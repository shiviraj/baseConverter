{"version":3,"sources":["components/BaseNumber.js","components/BaseConverter.js","serviceWorker.js","index.js"],"names":["base","value","onChange","className","type","toString","target","BaseConverter","props","state","handleChange","bind","number","parseInt","this","setState","baseComponents","push","BaseNumber","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kOAEe,cAAgC,IAA7BA,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC7B,OACE,yBAAKC,UAAU,QACb,uCAAaH,EAAb,MACA,2BACEI,KAAK,OACLH,MAAOA,EAAMI,SAASL,GACtBE,SAAU,gBAAGI,EAAH,EAAGA,OAAH,OAAgBJ,EAASI,EAAOL,MAAOD,QC6B1CO,E,kDAlCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAER,MAAO,GACtB,EAAKS,aAAe,EAAKA,aAAaC,KAAlB,gBAHH,E,yDAMNV,EAAOD,GAClB,IAAMY,EAASC,SAASZ,EAAOD,IAAS,EACxCc,KAAKC,SAAS,CAAEd,MAAOW,M,+BAMvB,IAFA,IAAMI,EAAiB,GAEdhB,EAAO,EAAGA,GAAQ,GAAIA,IAC7BgB,EAAeC,KACb,kBAACC,EAAD,CACElB,KAAMA,EACNmB,IAAKnB,EACLC,MAAOa,KAAKL,MAAMR,MAClBC,SAAUY,KAAKJ,gBAKrB,OACE,yBAAKP,UAAU,kBACb,8CACCa,O,GA7BmBI,IAAMC,WCSdC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.56855ebf.chunk.js","sourcesContent":["import React from 'react';\n\nexport default ({ base, value, onChange }) => {\n  return (\n    <div className=\"base\">\n      <label>Base {base}: </label>\n      <input\n        type=\"text\"\n        value={value.toString(base)}\n        onChange={({ target }) => onChange(target.value, base)}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport BaseNumber from './BaseNumber';\n\nclass BaseConverter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: 1 };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(value, base) {\n    const number = parseInt(value, base) || 0;\n    this.setState({ value: number });\n  }\n\n  render() {\n    const baseComponents = [];\n\n    for (let base = 2; base <= 16; base++) {\n      baseComponents.push(\n        <BaseNumber\n          base={base}\n          key={base}\n          value={this.state.value}\n          onChange={this.handleChange}\n        />\n      );\n    }\n\n    return (\n      <div className=\"main-container\">\n        <h1>Base Converter</h1>\n        {baseComponents}\n      </div>\n    );\n  }\n}\n\nexport default BaseConverter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport BaseConverter from './components/BaseConverter';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BaseConverter />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}